Noughts and Crosses Game code:

import random
import os.path
import json
random.seed()

def draw_board(board):
    border = " -----------"
    print(border)
    for row in board:
        print("| " + " | ".join(row) + " |")
        print(border)

def welcome(board):
    print('Welcome to the "Unbeatable Noughts and Crosses" game.')
    print("The board layout is shown below:")
    draw_board(board)

def initialise_board(board):
    for i in range(3):
        for j in range(3):
            board[i][j] = ' '
    return board

def get_player_move(board):
    position_tracking = {
        1: (0, 0), 2: (0, 1), 3: (0, 2),
        4: (1, 0), 5: (1, 1), 6: (1, 2),
        7: (2, 0), 8: (2, 1), 9: (2, 2)
    }
    while True:
        #print("Choose your square: 1  2  3\n                    4  5  6\n                    7  8  9")
        print("Choose your square: 1  2  3")
        print("4  5  6".rjust(27))  #.rjust(27) = right justifies the string number (4 5 6) with 27 characters (27 spaces)
        print("7  8  9".rjust(27))
        try:
            position = int(input())
            if position in position_tracking:
                row, column = position_tracking[position]
                if board[row][column] == ' ':
                    return row, column
                else:
                    print("The cell is already occupied. Please try again!")
            else:
                print("Invalid input. Please enter a number between 1 and 9.")
        except ValueError:
            print("Invalid inuput. Please enter a number!")

def choose_computer_move(board):
    while True:
        row, column = random.randint(0,2), random.randint(0,2)
        if board[row][column] == ' ':
            return row, column

def check_for_win(board, mark):
    conditions_to_win = [
        [board[0][0], board[0][1], board[0][2]], # for top row
        [board[1][0], board[1][1], board[1][2]], # for middle row
        [board[2][0], board[2][1], board[2][2]], # for bottom row
        [board[0][0], board[1][0], board[2][0]], # for left column
        [board[0][1], board[1][1], board[2][1]], # for middle column
        [board[0][2], board[1][2], board[2][2]], # for right column
        [board[0][0], board[1][1], board[2][2]], # for diagonal - top left to bottom right
        [board[0][2], board[1][1], board[2][0]]  # for diagonal - top right to bottom left
    ]
    if [mark, mark, mark] in conditions_to_win:
        return True
    return False

def check_for_draw(board):
    for row in board:
        if ' ' in row:
            return False
    return True

def play_game(board):
    board = initialise_board(board)
    draw_board(board)
    while True:
        row, column = get_player_move(board)
        board[row][column] = 'X'
        draw_board(board)
        if check_for_win(board, 'X'):
            print("Congratulations, you win!!")
            return 1
        if check_for_draw(board):
            print("It's a draw match!")
            return 0

        row, column = choose_computer_move(board)
        board[row][column] = 'O'
        draw_board(board)
        if check_for_win(board, 'O'):
            print("Computer wins this game!!")
            return -1
        if check_for_draw(board):
            print("It's a draw match!")
            return 0

def menu():
    while True:
        print("Enter one of the following options:")
        print("1 - Play the game")
        print("2 - Save score in file 'leaderboard.txt'")
        print("3 - Load and display the scores from the file 'leaderboard.txt'")
        print("q - End the program")
        choice = input("1, 2, 3 or q? ").lower()
        if choice in ["1", "2", "3", "q"]:
            return choice
        else:
            print("Invalid choice. Please try again!")

def load_scores():
    if os.path.exists("leaderboard.txt"):
        with open("leaderboard.txt", "r") as file:
            leaders = json.load(file)
    else:
        leaders = {} #if nothing is there, it gives empty dictionary
    return leaders

def save_score(score):
    name = input("Enter your name for leaderboard: ")
    leaders = load_scores()
    if name in leaders:
        leaders[name] += score  # used to add the score to the existing players name
    else:
        leaders[name] = score  # used to create a new entry for new player name
    with open("leaderboard.txt", "w") as file:
        json.dump(leaders, file)

def display_leaderboard(leaders):
    print("Leaderboard: ")
    for name, score in leaders.items():
        print(f"{name}: {score}")









play_game code:

from noughtsandcrosses import *

def main():
    board = [
        ['1', '2', '3'],
        ['4', '5', '6'],
        ['7', '8', '9']
        ]

    welcome(board)
    total_score = 0  # initialising the initial score
    while True:
        choice = menu()
        if choice == "1":
            score = play_game(board)
            total_score += score
            print("Your current score is:", total_score)
        elif choice == "2":
            save_score(total_score)
            total_score = 0
        elif choice == "3":
            leader_board = load_scores()
            display_leaderboard(leader_board)
        elif choice == "q":
            print("Thank you for playing the 'Unbeatable Noughts and Crosses' game.")
            print("Good Bye")
            return


if __name__ == '__main__':
    main()
            


